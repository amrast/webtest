include "akka-http-version"

remoting {
  default-timeout = 120 seconds
  routing {
    LanguageAnalysisService = {
      transport = rabbitmq
      address = {
        exchangeName = "LanguageAnalysisServiceE"
        routingKey = "LanguageAnalysisServiceQ"
      }
    }
  }
}

languageanalysis-app {
  interface = "0.0.0.0"

  sprayAdapter {
    listenAddress = "127.0.0.1"
    listenPort = 47013
  }
  receiveRabbitMQLinkName = "Service.LanguageAnalysis"

  numberOfConcurrentExtractionActors = 50

  execution-context = "akka.actor.languageanalysis-dispatcher"

  language {
    word2vec {
      googleVector = "/home/TestData/GoogleNews-vectors-negative300.bin.gz"
    }

  }
}



akka {
  jvm-exit-on-fatal-error = on
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  stdout-loglevel = "INFO"

  actor {
    //should not be used by any webmate-related parts
    default-dispatcher {
      throughput = 1// = as fair as possible
    }
  }

  http {

    server {
      # The default value of the `Server` header to produce if no
      # explicit `Server`-header was included in a response.
      # If this value is the empty string and no header was included in
      # the request, no `Server` header will be rendered at all.
      //    server-header = akka-http/${akka.http.version}

      # "PREVIEW" features that are not yet fully production ready.
      # These flags can can change or be removed between patch releases.
      preview {
        # ONLY WORKS WITH `bindAndHandleAsync` (currently)
        #
        # If this setting is enabled AND the akka-http2-support is found
        # on the classpath the usual Http().bind... method calls will bind
        # using HTTP/2. Please note that you must configure HTTPS while doing so.
        enable-http2 = off
      }

      # The time after which an idle connection will be automatically closed.
      # Set to `infinite` to completely disable idle connection timeouts.
      idle-timeout = 60 s

      # Defines the default time period within which the application has to
      # produce an HttpResponse for any given HttpRequest it received.
      # The timeout begins to run when the *end* of the request has been
      # received, so even potentially long uploads can have a short timeout.
      # Set to `infinite` to completely disable request timeout checking.
      #
      # Make sure this timeout is smaller than the idle-timeout, otherwise,
      # the idle-timeout will kick in first and reset the TCP connection
      # without a response.
      #
      # If this setting is not `infinite` the HTTP server layer attaches a
      # `Timeout-Access` header to the request, which enables programmatic
      # customization of the timeout period and timeout response for each
      # request individually.
      request-timeout = 20 s

      # The time period within which the TCP binding process must be completed.
      bind-timeout = 1s

      # The time period the HTTP server implementation will keep a connection open after
      # all data has been delivered to the network layer. This setting is similar to the SO_LINGER socket option
      # but does not only include the OS-level socket but also covers the Akka IO / Akka Streams network stack.
      # The setting is an extra precaution that prevents clients from keeping open a connection that is
      # already considered completed from the server side.
      #
      # If the network level buffers (including the Akka Stream / Akka IO networking stack buffers)
      # contains more data than can be transferred to the client in the given time when the server-side considers
      # to be finished with this connection, the client may encounter a connection reset.
      #
      # Set to 'infinite' to disable automatic connection closure (which will risk to leak connections).
      linger-timeout = 1 min

      # The maximum number of concurrently accepted connections when using the
      # `Http().bindAndHandle` methods.
      #
      # This setting doesn't apply to the `Http().bind` method which will still
      # deliver an unlimited backpressured stream of incoming connections.
      #
      # Note, that this setting limits the number of the connections on a best-effort basis.
      # It does *not* strictly guarantee that the number of established TCP connections will never
      # exceed the limit (but it will be approximately correct) because connection termination happens
      # asynchronously. It also does *not* guarantee that the number of concurrently active handler
      # flow materializations will never exceed the limit for the reason that it is impossible to reliably
      # detect when a materialization has ended.
      max-connections = 1024

      # The maximum number of requests that are accepted (and dispatched to
      # the application) on one single connection before the first request
      # has to be completed.
      # Incoming requests that would cause the pipelining limit to be exceeded
      # are not read from the connections socket so as to build up "back-pressure"
      # to the client via TCP flow control.
      # A setting of 1 disables HTTP pipelining, since only one request per
      # connection can be "open" (i.e. being processed by the application) at any
      # time. Set to higher values to enable HTTP pipelining.
      # This value must be > 0 and <= 1024.
      pipelining-limit = 16

      # Enables/disables the addition of a `Remote-Address` header
      # holding the clients (remote) IP address.
      remote-address-header = off

      # Enables/disables the addition of a `Raw-Request-URI` header holding the
      # original raw request URI as the client has sent it.
      raw-request-uri-header = off

      # Enables/disables automatic handling of HEAD requests.
      # If this setting is enabled the server dispatches HEAD requests as GET
      # requests to the application and automatically strips off all message
      # bodies from outgoing responses.
      # Note that, even when this setting is off the server will never send
      # out message bodies on responses to HEAD requests.
      transparent-head-requests = on

      # Enables/disables the returning of more detailed error messages to
      # the client in the error response.
      # Should be disabled for browser-facing APIs due to the risk of XSS attacks
      # and (probably) enabled for internal or non-browser APIs.
      # Note that akka-http will always produce log messages containing the full
      # error details.
      verbose-error-messages = off

      # The initial size of the buffer to render the response headers in.
      # Can be used for fine-tuning response rendering performance but probably
      # doesn't have to be fiddled with in most applications.
      response-header-size-hint = 512

      # The requested maximum length of the queue of incoming connections.
      # If the server is busy and the backlog is full the OS will start dropping
      # SYN-packets and connection attempts may fail. Note, that the backlog
      # size is usually only a maximum size hint for the OS and the OS can
      # restrict the number further based on global limits.
      backlog = 100

      # If this setting is empty the server only accepts requests that carry a
      # non-empty `Host` header. Otherwise it responds with `400 Bad Request`.
      # Set to a non-empty value to be used in lieu of a missing or empty `Host`
      # header to make the server accept such requests.
      # Note that the server will never accept HTTP/1.1 request without a `Host`
      # header, i.e. this setting only affects HTTP/1.1 requests with an empty
      # `Host` header as well as HTTP/1.0 requests.
      # Examples: `www.spray.io` or `example.com:8080`
      default-host-header = ""

      # Socket options to set for the listening socket. If a setting is left
      # undefined, it will use whatever the default on the system is.
      socket-options {
        so-receive-buffer-size = undefined
        so-send-buffer-size = undefined
        so-reuse-address = undefined
        so-traffic-class = undefined
        tcp-keep-alive = undefined
        tcp-oob-inline = undefined
        tcp-no-delay = undefined
      }

      # Modify to tweak parsing settings on the server-side only.
      parsing {
        max-uri-length             = 2k
        max-method-length          = 16
        max-response-reason-length = 64
        max-header-name-length     = 64
        max-header-value-length    = 8k
        max-header-count           = 64
        max-chunk-ext-length       = 256
        max-chunk-size             = 1m
        max-content-length = 120m
        # no overrides by default, see `akka.http.parsing` for default values
      }

      # Enables/disables the logging of unencrypted HTTP traffic to and from the HTTP
      # server for debugging reasons.
      #
      # Note: Use with care. Logging of unencrypted data traffic may expose secret data.
      #
      # Incoming and outgoing traffic will be logged in hexdump format. To enable logging,
      # specify the number of bytes to log per chunk of data (the actual chunking depends
      # on implementation details and networking conditions and should be treated as
      # arbitrary).
      #
      # For logging on the client side, see akka.http.client.log-unencrypted-network-bytes.
      #
      # `off` : no log messages are produced
      # Int   : determines how many bytes should be logged per data chunk
      log-unencrypted-network-bytes = off

      http2 {
        # The maximum number of bytes to receive from a request entity in a single chunk.
        #
        # The reasoning to limit that amount (instead of delivering all buffered data for a stream) is that
        # the amount of data in the internal buffers will drive backpressure and flow control on the HTTP/2 level. Bigger
        # chunks would mean that the user-level entity reader will have to buffer all that data if it cannot read it in one
        # go. The implementation would not be able to backpressure further data in that case because it does not know about
        # this user-level buffer.
        request-entity-chunk-size = 65536 b

        # The number of request data bytes the HTTP/2 implementation is allowed to buffer internally per connection. Free
        # space in this buffer is communicated to the peer using HTTP/2 flow-control messages to backpressure data if it
        # isn't read fast enough.
        #
        # When there is no backpressure, this amount will limit the amount of in-flight data. It might need to be increased
        # for high bandwidth-delay-product connections.
        #
        # There is a relation between the `incoming-connection-level-buffer-size` and the `incoming-stream-level-buffer-size`:
        # If incoming-connection-level-buffer-size < incoming-stream-level-buffer-size * number_of_streams, then
        # head-of-line blocking is possible between different streams on the same connection.
        incoming-connection-level-buffer-size = 400 MB

        # The number of request data bytes the HTTP/2 implementation is allowed to buffer internally per stream. Free space
        # in this buffer is communicated to the peer using HTTP/2 flow-control messages to backpressure data if it isn't
        # read fast enough.
        #
        # When there is no backpressure, this amount will limit the amount of in-flight data per stream. It might need to
        # be increased for high bandwidth-delay-product connections.
        incoming-stream-level-buffer-size = 5120kB
      }
    }
  }

  stream {

    materializer {

      # Initial size of buffers used in stream elements
      initial-input-buffer-size = 40
      # Maximum size of buffers used in stream elements
      max-input-buffer-size = 256

      # Fully qualified config path which holds the dispatcher configuration
      # to be used by ActorMaterializer when creating Actors.
      # When this value is left empty, the default-dispatcher will be used.
      dispatcher = ""

      # Cleanup leaked publishers and subscribers when they are not used within a given
      # deadline
      subscription-timeout {
        # when the subscription timeout is reached one of the following strategies on
        # the "stale" publisher:
        # cancel - cancel it (via `onError` or subscribing to the publisher and
        #          `cancel()`ing the subscription right away
        # warn   - log a warning statement about the stale element (then drop the
        #          reference to it)
        # noop   - do nothing (not recommended)
        mode = cancel

        # time after which a subscriber / publisher is considered stale and eligible
        # for cancelation (see `akka.stream.subscription-timeout.mode`)
        timeout = 50s
      }

      # Enable additional troubleshooting logging at DEBUG log level
      debug-logging = off

      # Maximum number of elements emitted in batch if downstream signals large demand
      output-burst-limit = 1000

      # Enable automatic fusing of all graphs that are run. For short-lived streams
      # this may cause an initial runtime overhead, but most of the time fusing is
      # desirable since it reduces the number of Actors that are created.
      # Deprecated, since Akka 2.5.0, setting does not have any effect.
      auto-fusing = on

      # Those stream elements which have explicit buffers (like mapAsync, mapAsyncUnordered,
      # buffer, flatMapMerge, Source.actorRef, Source.queue, etc.) will preallocate a fixed
      # buffer upon stream materialization if the requested buffer size is less than this
      # configuration parameter. The default is very high because failing early is better
      # than failing under load.
      #
      # Buffers sized larger than this will dynamically grow/shrink and consume more memory
      # per element than the fixed size buffers.
      max-fixed-buffer-size = 1000000000

      # Maximum number of sync messages that actor can process for stream to substream communication.
      # Parameter allows to interrupt synchronous processing to get upsteam/downstream messages.
      # Allows to accelerate message processing that happening withing same actor but keep system responsive.
      sync-processing-limit = 1000

      debug {
        # Enables the fuzzing mode which increases the chance of race conditions
        # by aggressively reordering events and making certain operations more
        # concurrent than usual.
        # This setting is for testing purposes, NEVER enable this in a production
        # environment!
        # To get the best results, try combining this setting with a throughput
        # of 1 on the corresponding dispatchers.
        fuzzing-mode = off
      }
    }
  }

  ssl-config {
    protocol = "TLSv1.2"
  }
}

ssl-config {
  logger = "com.typesafe.sslconfig.akka.util.AkkaLoggerBridge"
}

spray.servlet {

  # The FQN (Fully Qualified Name) of the class to load when the
  # servlet context is initialized (e.g. "com.example.ApiBoot").
  # The class must have a constructor with a single
  # `javax.servlet.ServletContext` parameter and implement
  # the `spray.servlet.WebBoot` trait.
  boot-class = ""

  # If a request hasn't been responded to after the time period set here
  # a `spray.http.Timedout` message will be sent to the timeout handler.
  # Set to `infinite` to completely disable request timeouts.
  request-timeout = 30 s

  # After a `Timedout` message has been sent to the timeout handler and the
  # request still hasn't been completed after the time period set here
  # the server will complete the request itself with an error response.
  # Set to `infinite` to disable timeout timeouts.
  timeout-timeout = 500 ms

  # The path of the actor to send `spray.http.Timedout` messages to.
  # If empty all `Timedout` messages will go to the "regular" request handling actor.
  timeout-handler = ""

  # A path prefix that is automatically "consumed" before the request is
  # being dispatched to the HTTP service route.
  # Can be used to match servlet context paths configured for the application.
  # Make sure to include a leading slash with your prefix, e.g. "/foobar".
  # Set to `AUTO` to make spray-servlet pick up the ServletContext::getContextPath.
  root-path = AUTO

  # Enables/disables the addition of a `Remote-Address` header
  # holding the clients (remote) IP address.
  remote-address-header = off

  # Enables/disables the returning of more detailed error messages to
  # the client in the error response.
  # Should be disabled for browser-facing APIs due to the risk of XSS attacks
  # and (probably) enabled for internal or non-browser APIs.
  # Note that spray will always produce log messages containing the full error details.
  verbose-error-messages = off

  # The maximum size of the request entity that is still accepted by the server.
  # Requests with a greater entity length are rejected with an error response.
  # Must be greater than zero.
  max-content-length = 5 m

  # Enables/disables the inclusion of `spray.servlet.ServletRequestInfoHeader` in the
  # headers of the HTTP request sent to the service actor.
  servlet-request-access = off

  # Enables/disables the logging of warning messages in case an incoming
  # message (request or response) contains an HTTP header which cannot be
  # parsed into its high-level model class due to incompatible syntax.
  # Note that, independently of this settings, spray will accept messages
  # with such headers as long as the message as a whole would still be legal
  # under the HTTP specification even without this header.
  # If a header cannot be parsed into a high-level model instance it will be
  # provided as a `RawHeader`.
  illegal-header-warnings = on

  # Sets the strictness mode for parsing request target URIs.
  # The following values are defined:
  #
  # `strict`: RFC3986-compliant URIs are required,
  #     a 400 response is triggered on violations
  #
  # `relaxed`: all visible 7-Bit ASCII chars are allowed
  #
  # `relaxed-with-raw-query`: like `relaxed` but additionally
  #     the URI query is not parsed, but delivered as one raw string
  #     as the `key` value of a single Query structure element.
  #
  uri-parsing-mode = relaxed
}

c3p0 {
  testConnectionOnCheckout = true
  maxIdleTime = 7200
  maxIdleTimeExcessConnections = 300
  initialPoolSize = 1
  maxPoolSize = 15
}